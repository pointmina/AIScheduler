package com.hanto.aischeduler.ui.screen

import androidx.compose.foundation.ExperimentalFoundationApi
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.statusBarsPadding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.itemsIndexed
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material.icons.filled.Done
import androidx.compose.material.icons.filled.Edit
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.TopAppBarDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableIntStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.hanto.aischeduler.data.model.Task
import com.hanto.aischeduler.ui.components.AppCard
import com.hanto.aischeduler.ui.components.DraggableScheduleTaskCard
import com.hanto.aischeduler.ui.components.SolidBackground
import com.hanto.aischeduler.ui.theme.AISchedulerTheme
import com.hanto.aischeduler.ui.theme.AppColors

@OptIn(ExperimentalMaterial3Api::class, ExperimentalFoundationApi::class)
@Composable
fun ScheduleResultScreen(
    tasks: List<Task>,
    isEditMode: Boolean,
    onBack: () -> Unit,
    onToggleEditMode: () -> Unit,
    onReorderTasks: (Int, Int) -> Unit,
    onUpdateTaskTime: (String, String, String) -> Unit,
    onSave: () -> Unit = {},
    onSetAlarm: () -> Unit = {},
    modifier: Modifier = Modifier
) {
    var draggedTaskIndex by remember { mutableIntStateOf(-1) }

    SolidBackground {
        Column(
            modifier = modifier
                .fillMaxSize()
                .statusBarsPadding()
        ) {
            // ÏÉÅÎã® Ïï±Î∞î (Ìé∏Ïßë Î≤ÑÌäº Ï∂îÍ∞Ä)
            TopAppBar(
                title = {
                    Text(
                        if (isEditMode) "Ïä§ÏºÄÏ§Ñ Ìé∏Ïßë Ï§ë" else "Ïò§ÎäòÏùò ÏôÑÎ≤ΩÌïú Ïä§ÏºÄÏ§Ñ",
                        color = Color.Black,
                        fontWeight = FontWeight.Bold
                    )
                }, navigationIcon = {
                    IconButton(onClick = onBack) {
                        Icon(
                            Icons.Default.ArrowBack, contentDescription = "Îí§Î°úÍ∞ÄÍ∏∞", tint = Color.Black
                        )
                    }
                }, actions = {
                    // Ìé∏Ïßë Î™®Îìú ÌÜ†Í∏Ä Î≤ÑÌäº
                    IconButton(onClick = onToggleEditMode) {
                        Icon(
                            imageVector = if (isEditMode) Icons.Default.Done else Icons.Default.Edit,
                            contentDescription = if (isEditMode) "Ìé∏Ïßë ÏôÑÎ£å" else "Ìé∏Ïßë Î™®Îìú",
                            tint = if (isEditMode) AppColors.Warning else Color.Black
                        )
                    }
                    Spacer(modifier = Modifier.width(8.dp))
                }, colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = Color.Transparent
                )
            )

            // Ìé∏Ïßë Î™®Îìú ÏïàÎÇ¥
            if (isEditMode) {
                Surface(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(horizontal = 16.dp),
                    shape = RoundedCornerShape(8.dp),
                    color = AppColors.Warning.copy(alpha = 0.1f)
                ) {
                    Text(
                        text = "üí° Í∏∏Í≤å ÎàåÎü¨ÏÑú ÎìúÎûòÍ∑∏ÌïòÍ±∞ÎÇò ÌÉ≠Ìï¥ÏÑú ÏãúÍ∞ÑÏùÑ Ìé∏ÏßëÌïòÏÑ∏Ïöî",
                        modifier = Modifier.padding(12.dp),
                        color = AppColors.Warning,
                        fontSize = 12.sp
                    )
                }
                Spacer(modifier = Modifier.height(8.dp))
            }

            // Ïä§ÌÅ¨Î°§ Í∞ÄÎä•Ìïú ÏΩòÌÖêÏ∏†
            LazyColumn(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(16.dp),
                verticalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                // ÌÜµÍ≥Ñ Ïπ¥Îìú
                item {
                    ScheduleStatsCard(
                        taskCount = tasks.size, totalHours = calculateTotalHours(tasks)
                    )
                }

                // Ïä§ÏºÄÏ§Ñ ÏïÑÏù¥ÌÖúÎì§ (ÎìúÎûòÍ∑∏ Í∞ÄÎä•)
                itemsIndexed(
                    items = tasks, key = { _, task -> task.id }) { index, task ->
                    DraggableScheduleTaskCard(
                        task = task,
                        isEditMode = isEditMode,
                        isDragging = draggedTaskIndex == index,
                        onDragStart = { draggedTaskIndex = index },
                        onDragEnd = { draggedTaskIndex = -1 },
                        onTimeEdit = { startTime, endTime ->
                            onUpdateTaskTime(task.id, startTime, endTime)
                        },
                        modifier = Modifier.animateItemPlacement()
                    )
                }

                // Ïï°ÏÖò Î≤ÑÌäºÎì§
                item {
                    if (!isEditMode) {
                        Spacer(modifier = Modifier.height(16.dp))
                        Row(
                            modifier = Modifier.fillMaxWidth(),
                            horizontalArrangement = Arrangement.spacedBy(12.dp)
                        ) {
                            Button(
                                onClick = onSave,
                                modifier = Modifier.weight(1f),
                                colors = ButtonDefaults.buttonColors(
                                    containerColor = AppColors.Secondary
                                ),
                                shape = RoundedCornerShape(12.dp)
                            ) {
                                Text("üíæ Ï†ÄÏû•")
                            }

                            Button(
                                onClick = onSetAlarm,
                                modifier = Modifier.weight(1f),
                                colors = ButtonDefaults.buttonColors(
                                    containerColor = AppColors.Warning
                                ),
                                shape = RoundedCornerShape(12.dp)
                            ) {
                                Text("üîî ÏïåÎ¶º ÏÑ§Ï†ï")
                            }
                        }
                    }
                }

                // ÌïòÎã® Ïó¨Î∞±
                item {
                    Spacer(modifier = Modifier.height(32.dp))
                }
            }
        }
    }
}

@Composable
private fun ScheduleStatsCard(
    taskCount: Int, totalHours: Float
) {
    AppCard {
        Row(
            modifier = Modifier.fillMaxWidth(),
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            Column {
                Text(
                    text = "üéØ Ïò§ÎäòÏùò ÏùºÏ†ï",
                    fontSize = 16.sp,
                    fontWeight = FontWeight.Bold,
                    color = AppColors.OnSurface
                )
                Spacer(modifier = Modifier.height(4.dp))
                Text(
                    text = "Ï¥ù ${taskCount}Í∞ú ÏûëÏóÖ ‚Ä¢ ${totalHours}ÏãúÍ∞Ñ",
                    fontSize = 14.sp,
                    color = AppColors.TextSecondary
                )
            }

            // ÏßÑÌñâÎ•† ÏõêÌòï ÌëúÏãú (ÏûÑÏãú)
            Surface(
                shape = RoundedCornerShape(50),
                color = AppColors.Primary.copy(alpha = 0.1f),
                modifier = Modifier.size(60.dp)
            ) {
                Box(
                    contentAlignment = Alignment.Center
                ) {
                    Text(
                        text = "100%",
                        fontSize = 12.sp,
                        fontWeight = FontWeight.Bold,
                        color = AppColors.Primary
                    )
                }
            }
        }
    }
}

// Ï¥ù ÏãúÍ∞Ñ Í≥ÑÏÇ∞
private fun calculateTotalHours(tasks: List<Task>): Float {
    return tasks.size * 1.5f // ÏûÑÏãúÎ°ú ÏûëÏóÖÎãπ 1.5ÏãúÍ∞ÑÏúºÎ°ú Í≥ÑÏÇ∞
}
